generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  PATIENT
  THERAPIST
  DOCTOR
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  BOOKED
  COMPLETED
  RUNNING
  MISSED
  CANCELLED
}

enum DepartmentType {
  MEDICAL
  OCCUPATIONAL
  PSYCHOLOGICAL
  PHYSIO
  SPEECH_LANGUAGE
  ADMINISTRATION
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum PaymentMethod {
  NAGAD
  BKASH
  CARD
  CASH
}

enum LanguagePreference {
  BANGLA
  ENGLISH
}

enum UploadedType {
  REPORT
  PRESCRIPTION
  OTHER
}

enum RecordsType {
  REPORT
  PRESCRIPTION
  OTHER
}

enum UploadedBy {
  PATIENT
  THERAPIST
  DOCTOR
  ADMIN
  OTHER
}

enum ScheduleAvailabilityType {
  WEEKLY
  MONTHLY
  ONE_TIME
  RANGE
}

enum AppointmentType {
  ONE_TO_ONE
  GROUP
}

// PATIENT TYPES
enum PatientType {
  ADULT
  PEADIATRIC
}

// DIAGNOSIS TYPES
enum DiagnosisType {
  NEURON
  MUSCULOSKELETAL
  PEADIATRIC
  HAND
  SPINAL
}

enum CounterType {
  PATIENT
  PROFESSIONAL
}

model Counter {
  id         String      @id @default(uuid())
  type       CounterType
  department String?
  date       DateTime
  lastSerial Int         @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("counters")
}

// USER
model User {
  id       String  @id @default(uuid())
  userKey  String  @unique
  email    String? @unique
  phone    String? @unique
  password String

  role        UserRole     @default(PATIENT)
  userProfile UserProfile?

  isActive   Boolean @default(true)
  isVerified Boolean @default(false)
  isBlocked  Boolean @default(false)
  isDeleted  Boolean @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  receptionistId String?

  @@map("users")
}

// USER PROFILE
model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  firstName        String
  lastName         String
  gender           Gender
  dateOfBirth      DateTime
  emergencyContact String?
  relationWithEC   String?
  presentAddress   String?
  permanentAddress String?
  profilePicture   String?
  bloodGroup       String?

  user         User                 @relation(fields: [userId], references: [id])
  patient      Patient?
  professional ProfessionalProfile?
  admin        Admin?
  receptionist Receptionist?

  @@map("userProfiles")
}

// RECEPTIONIST MODEL
model Receptionist {
  id            String @id @default(uuid())
  userProfileId String @unique

  userProfile     UserProfile @relation(fields: [userProfileId], references: [id])
  patientsCreated Patient[]   @relation("PatientCreatedBy")

  Appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("receptionists")
}

// PATIENT MODEL
model Patient {
  id            String  @id @default(uuid())
  userProfileId String  @unique
  createdById   String?

  patientType      PatientType   @default(ADULT)
  diagnosisType    DiagnosisType @default(NEURON)
  problems         String[]
  diagnosis        String?
  diagnosisBy      String?
  diagnosisDate    DateTime?
  records          RecordsType   @default(PRESCRIPTION)
  referredBy       String?
  visitedDoctorIds String[]      @default([])

  userProfile UserProfile @relation(fields: [userProfileId], references: [id])

  appointment         Appointment[]
  AppointmentFeedback AppointmentFeedback[]
  Payment             Payment[]

  createdAt DateTime      @default(now())
  createdBy Receptionist? @relation("PatientCreatedBy", fields: [createdById], references: [id])
  updatedAt DateTime      @updatedAt

  @@map("patients")
}

// THERAPIST MODEL
model Therapist {
  id             String @id @default(uuid())
  professionalId String @unique

  specializations String[]
  consultationFee Int      @default(0)
  availableOnline Boolean  @default(false)

  professionalProfile ProfessionalProfile @relation(fields: [professionalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("therapists")
}

// DOCTOR MODEL
model Doctor {
  id             String @id @default(uuid())
  professionalId String @unique

  licenseNumber String

  specializations String[]
  consultationFee Int      @default(0)
  availableOnline Boolean  @default(false)

  professionalProfile ProfessionalProfile @relation(fields: [professionalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctors")
}

// ADMIN MODEL
model Admin {
  id            String @id @default(uuid())
  userProfileId String @unique

  userProfile UserProfile @relation(fields: [userProfileId], references: [id])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ProfessionalProfile ProfessionalProfile[]

  @@map("admins")
}

// DEPARTMENT
model Department {
  id            String                @id @default(uuid())
  name          DepartmentType        @unique @default(OTHER)
  description   String?
  professionals ProfessionalProfile[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointment Appointment[]
  payment     Payment[]

  @@map("departments")
}

// PROFESSIONAL BASE MODEL
model ProfessionalProfile {
  id            String  @id @default(uuid())
  userProfileId String  @unique
  departmentId  String
  enteredId     String?

  qualifications  String[]
  experienceYears Int
  languagesSpoken LanguagePreference @default(BANGLA)

  userProfile UserProfile @relation(fields: [userProfileId], references: [id])
  department  Department  @relation(fields: [departmentId], references: [id])
  enteredBy   Admin?      @relation(fields: [enteredId], references: [id])
  therapist   Therapist?
  doctor      Doctor?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  appointment          Appointment[]
  appointmentNote      AppointmentNote[]
  scheduleAvailability ScheduleAvailability[]
  appointmentFeedback  AppointmentFeedback[]
  payment              Payment[]
}

// SCHEDULE AVAILABILITY
model ScheduleAvailability {
  id             String @id @default(uuid())
  professionalId String

  type         ScheduleAvailabilityType @default(MONTHLY)
  dayOfWeek    Int                      @default(0)
  specificDate DateTime? // used if type = ONE_TIME
  fromDate     DateTime? // for RANGE
  toDate       DateTime? // for RANGE
  dayOfMonth   Int? // e.g. 1st, 15th of month, for MONTHLY
  startTime    String
  endTime      String
  isAvailable  Boolean                  @default(true)

  professional ProfessionalProfile @relation(fields: [professionalId], references: [id])
  appointment  Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([professionalId, specificDate, startTime, endTime])
}

// APPOINTMENT
model Appointment {
  id                     String @id @default(uuid())
  patientId              String
  departmentId           String
  professionalId         String
  scheduleAvailabilityId String
  creatorId              String

  appointmentDate DateTime
  startTime       String
  endTime         String
  status          AppointmentStatus @default(PENDING)
  appointmentType AppointmentType   @default(ONE_TO_ONE)

  patient      Patient              @relation(fields: [patientId], references: [id])
  department   Department           @relation(fields: [departmentId], references: [id])
  professional ProfessionalProfile  @relation(fields: [professionalId], references: [id])
  schedule     ScheduleAvailability @relation(fields: [scheduleAvailabilityId], references: [id])
  creator      Receptionist?        @relation(fields: [creatorId], references: [id])

  appointmentNote     AppointmentNote?
  appointmentFeedback AppointmentFeedback?
  payment             Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([professionalId, patientId, departmentId, appointmentDate, startTime, endTime])
  @@map("appointments")
}

model AppointmentNote {
  id             String @id @default(uuid())
  appointmentId  String @unique
  professionalId String
  note           String

  professionalProfile ProfessionalProfile @relation(fields: [professionalId], references: [id])

  appointment Appointment @relation(fields: [appointmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointmentNotes")
}

// APPOINTMENT FEEDBACK
model AppointmentFeedback {
  id             String @id @default(uuid())
  appointmentId  String @unique
  patientId      String
  professionalId String

  rating  Int
  comment String?

  patient      Patient             @relation(fields: [patientId], references: [id])
  professional ProfessionalProfile @relation(fields: [professionalId], references: [id])
  appointment  Appointment         @relation(fields: [appointmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointmentFeedbacks")
}

model Payment {
  id             String @id @default(uuid())
  appointmentId  String @unique
  patientId      String
  professionalId String
  departmentId   String
  transactionId  String @unique

  amount Int           @default(0)
  status PaymentStatus @default(PENDING)
  method PaymentMethod @default(CASH)

  patient      Patient             @relation(fields: [patientId], references: [id])
  professional ProfessionalProfile @relation(fields: [professionalId], references: [id])
  department   Department          @relation(fields: [departmentId], references: [id])
  appointment  Appointment         @relation(fields: [appointmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// model Notification {
//   id            String   @id @default(uuid())
//   userId        String
//   appointmentId String?
//   message       String
//   isRead        Boolean  @default(false)
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   user        User         @relation(fields: [userId], references: [id])
//   appointment Appointment? @relation(fields: [appointmentId], references: [id])
// }

// model NotificationSetting {
//   id           String   @id @default(uuid())
//   userId       String   @unique
//   emailEnabled Boolean  @default(true)
//   smsEnabled   Boolean  @default(false)
//   pushEnabled  Boolean  @default(true)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])
// }

// model DocumentUpload {
//   id            String       @id @default(uuid())
//   appointmentId String?
//   uploadedBy    UploadedBy
//   type          UploadedType
//   fileUrl       String
//   createdAt     DateTime     @default(now())
//   updatedAt     DateTime     @updatedAt
// }

// model ChatMessage {
//   id            String   @id @default(uuid())
//   appointmentId String
//   senderId      String
//   receiverId    String
//   message       String
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   appointment Appointment @relation(fields: [appointmentId], references: [id])
// }

// model VideoCall {
//   id            String    @id @default(uuid())
//   appointmentId String    @unique
//   roomLink      String
//   startedAt     DateTime?
//   endedAt       DateTime?
//   status        String?
//   duration      Int?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt

//   appointment Appointment @relation(fields: [appointmentId], references: [id])
// }
